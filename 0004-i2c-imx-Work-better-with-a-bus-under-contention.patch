From a836882baeb4093a3e2babe22b308504bd513c9e Mon Sep 17 00:00:00 2001
From: Sean Cross <xobs@kosagi.com>
Date: Thu, 31 Dec 2015 11:48:55 +0800
Subject: [PATCH 04/30] i2c: imx: Work better with a bus under contention

The i.MX6 does not behave well when the bus is in use.  This
patch causes it to try harder under these situations, but still
recognize when to give up.

Signed-off-by: Sean Cross <xobs@kosagi.com>

(Jookia: Ported to v4.14)
---
 drivers/i2c/busses/i2c-imx.c | 96 +++++++++++++++++++++++++++++-------
 1 file changed, 78 insertions(+), 18 deletions(-)

diff --git a/drivers/i2c/busses/i2c-imx.c b/drivers/i2c/busses/i2c-imx.c
index d4b72e4ffd71..1d5094a6318d 100644
--- a/drivers/i2c/busses/i2c-imx.c
+++ b/drivers/i2c/busses/i2c-imx.c
@@ -408,6 +408,7 @@ static int i2c_imx_bus_busy(struct imx_i2c_struct *i2c_imx, int for_busy)
 {
 	unsigned long orig_jiffies = jiffies;
 	unsigned int temp;
+	int successes = 0;
 
 	dev_dbg(&i2c_imx->adapter.dev, "<%s>\n", __func__);
 
@@ -421,18 +422,30 @@ static int i2c_imx_bus_busy(struct imx_i2c_struct *i2c_imx, int for_busy)
 			return -EAGAIN;
 		}
 
-		if (for_busy && (temp & I2SR_IBB)) {
-			i2c_imx->stopped = 0;
-			break;
+		if (for_busy) {
+			if ((temp & I2SR_IBB)) {
+				if (successes++ > 2) {
+					i2c_imx->stopped = 0;
+					break;
+				}
+			}
+			else
+				successes = 0;
 		}
-		if (!for_busy && !(temp & I2SR_IBB)) {
-			i2c_imx->stopped = 1;
-			break;
+		if (!for_busy) {
+			if (!(temp & I2SR_IBB)) {
+				if (successes++ > 2) {
+					i2c_imx->stopped = 0;
+					break;
+				}
+			}
+			else
+				successes = 0;
 		}
 		if (time_after(jiffies, orig_jiffies + msecs_to_jiffies(500))) {
 			dev_dbg(&i2c_imx->adapter.dev,
 				"<%s> I2C bus is busy\n", __func__);
-			return -ETIMEDOUT;
+			return -EAGAIN;
 		}
 		schedule();
 	}
@@ -446,7 +459,7 @@ static int i2c_imx_trx_complete(struct imx_i2c_struct *i2c_imx)
 
 	if (unlikely(!(i2c_imx->i2csr & I2SR_IIF))) {
 		dev_dbg(&i2c_imx->adapter.dev, "<%s> Timeout\n", __func__);
-		return -ETIMEDOUT;
+		return -EAGAIN;
 	}
 	dev_dbg(&i2c_imx->adapter.dev, "<%s> TRX complete\n", __func__);
 	i2c_imx->i2csr = 0;
@@ -455,9 +468,25 @@ static int i2c_imx_trx_complete(struct imx_i2c_struct *i2c_imx)
 
 static int i2c_imx_acked(struct imx_i2c_struct *i2c_imx)
 {
-	if (imx_i2c_read_reg(i2c_imx, IMX_I2C_I2SR) & I2SR_RXAK) {
+	unsigned int sr;
+
+	sr = imx_i2c_read_reg(i2c_imx, IMX_I2C_I2SR);
+	if (sr & I2SR_RXAK) {
 		dev_dbg(&i2c_imx->adapter.dev, "<%s> No ACK\n", __func__);
-		return -ENXIO;  /* No ACK */
+
+		dev_dbg(&i2c_imx->adapter.dev,
+				"<%s> CONTROL: 0x%08x\n", __func__,
+				imx_i2c_read_reg(i2c_imx, IMX_I2C_I2CR));
+		dev_dbg(&i2c_imx->adapter.dev,
+				"<%s> STATUS: 0x%08x\n", __func__, sr);
+
+		/* check for arbitration lost */
+		if ((sr & I2SR_IAL) || (sr & I2SR_IBB)) {
+			sr &= ~I2SR_IAL;
+			imx_i2c_write_reg(sr, i2c_imx, IMX_I2C_I2SR);
+			return -EAGAIN;
+		}
+		return -EIO;  /* No ACK */
 	}
 
 	dev_dbg(&i2c_imx->adapter.dev, "<%s> ACK received\n", __func__);
@@ -522,24 +551,50 @@ static int i2c_imx_clk_notifier_call(struct notifier_block *nb,
 
 static int i2c_imx_start(struct imx_i2c_struct *i2c_imx)
 {
+	unsigned long orig_jiffies = jiffies;
 	unsigned int temp = 0;
 	int result;
 
 	dev_dbg(&i2c_imx->adapter.dev, "<%s>\n", __func__);
 
 	imx_i2c_write_reg(i2c_imx->ifdr, i2c_imx, IMX_I2C_IFDR);
-	/* Enable I2C controller */
-	imx_i2c_write_reg(i2c_imx->hwdata->i2sr_clr_opcode, i2c_imx, IMX_I2C_I2SR);
-	imx_i2c_write_reg(i2c_imx->hwdata->i2cr_ien_opcode, i2c_imx, IMX_I2C_I2CR);
 
 	/* Wait controller to be stable */
 	usleep_range(50, 150);
+	do {
+		/* Enable I2C controller */
+		imx_i2c_write_reg(i2c_imx->hwdata->i2sr_clr_opcode,
+				  i2c_imx, IMX_I2C_I2SR);
+		imx_i2c_write_reg(i2c_imx->hwdata->i2cr_ien_opcode,
+				  i2c_imx, IMX_I2C_I2CR);
+
+		/* Wait controller to be stable */
+		udelay(50);
+
+		/* Wait for bus to be idle */
+		result = i2c_imx_bus_busy(i2c_imx, 0);
+		if (result) {
+			schedule();
+		}
+		else {
+			/* Start I2C transaction */
+			temp = imx_i2c_read_reg(i2c_imx, IMX_I2C_I2CR);
+			temp |= I2CR_MSTA;
+			imx_i2c_write_reg(temp, i2c_imx, IMX_I2C_I2CR);
+			result = i2c_imx_bus_busy(i2c_imx, 1);
+			if (result) {
+				udelay(50);
+				schedule();
+			}
+			i2c_imx->stopped = 0;
+		}
 
-	/* Start I2C transaction */
-	temp = imx_i2c_read_reg(i2c_imx, IMX_I2C_I2CR);
-	temp |= I2CR_MSTA;
-	imx_i2c_write_reg(temp, i2c_imx, IMX_I2C_I2CR);
-	result = i2c_imx_bus_busy(i2c_imx, 1);
+		if (time_after(jiffies, orig_jiffies + msecs_to_jiffies(500))) {
+			dev_dbg(&i2c_imx->adapter.dev,
+				"<%s> I2C bus is busy\n", __func__);
+			break;
+		}
+	} while (result == -EAGAIN);
 	if (result)
 		return result;
 
@@ -959,8 +1014,11 @@ static int i2c_imx_xfer(struct i2c_adapter *adapter,
 
 	pm_runtime_mark_last_busy(i2c_imx->adapter.dev.parent);
 	pm_runtime_put_autosuspend(i2c_imx->adapter.dev.parent);
+	if (result == -EAGAIN)
+		schedule();
 
 out:
+
 	dev_dbg(&i2c_imx->adapter.dev, "<%s> exit with: %s: %d\n", __func__,
 		(result < 0) ? "error" : "success msg",
 			(result < 0) ? result : num);
@@ -1084,6 +1142,8 @@ static int i2c_imx_probe(struct platform_device *pdev)
 	i2c_imx->adapter.algo		= &i2c_imx_algo;
 	i2c_imx->adapter.dev.parent	= &pdev->dev;
 	i2c_imx->adapter.nr		= pdev->id;
+	i2c_imx->adapter.retries	= 15;
+	i2c_imx->adapter.timeout	= msecs_to_jiffies(2000);
 	i2c_imx->adapter.dev.of_node	= pdev->dev.of_node;
 	i2c_imx->base			= base;
 
-- 
2.20.1

